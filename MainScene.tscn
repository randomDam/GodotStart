[gd_scene load_steps=23 format=2]

[ext_resource path="res://player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://Textures/grid.png" type="Texture" id=2]
[ext_resource path="res://exportTreeAut2/Broadleaf_Hero_Field.tscn" type="PackedScene" id=3]
[ext_resource path="res://SimpleScript/Rotation.gd" type="Script" id=4]
[ext_resource path="res://Object/Plan.obj" type="ArrayMesh" id=5]
[ext_resource path="res://material/water/Water_UV.png" type="Texture" id=6]
[ext_resource path="res://material/water/Foam.png" type="Texture" id=7]
[ext_resource path="res://material/water/Caustic.png" type="TextureArray" id=8]
[ext_resource path="res://material/water/Water_N_B.png" type="Texture" id=9]
[ext_resource path="res://material/water/Water_N_A.png" type="Texture" id=10]

[sub_resource type="ProceduralSky" id=4]
ground_horizon_color = Color( 0.839216, 0.917647, 0.980392, 1 )
ground_curve = 0.177531
sun_latitude = 17.15
sun_longitude = 142.69

[sub_resource type="Environment" id=5]
background_mode = 2
background_sky = SubResource( 4 )
ambient_light_energy = 0.5
ambient_light_sky_contribution = 0.3
fog_enabled = true
fog_color = Color( 0.74902, 0.843137, 0.937255, 1 )
fog_sun_amount = 0.88
fog_depth_end = 91.9
fog_depth_curve = 0.707108
fog_height_enabled = true
fog_height_min = 9.4
fog_height_max = -3.8
fog_height_curve = 9.18958
tonemap_mode = 4
tonemap_exposure = 0.8
dof_blur_far_distance = 80.0
glow_intensity = 0.91
glow_blend_mode = 1

[sub_resource type="SpatialMaterial" id=9]
albedo_texture = ExtResource( 2 )
uv1_scale = Vector3( 2, 2, 1 )

[sub_resource type="CubeMesh" id=7]
material = SubResource( 9 )
size = Vector3( 4, 4, 4 )

[sub_resource type="BoxShape" id=8]
extents = Vector3( 2.05518, 2.05571, 2.094 )

[sub_resource type="SpatialMaterial" id=10]
albedo_texture = ExtResource( 2 )
uv1_scale = Vector3( 4, 4, 1 )

[sub_resource type="CubeMesh" id=11]
material = SubResource( 10 )
size = Vector3( 4, 4, 4 )

[sub_resource type="SpatialMaterial" id=12]
albedo_texture = ExtResource( 2 )
uv1_scale = Vector3( 1000, 1000, 1 )

[sub_resource type="ConcavePolygonShape" id=17]
data = PoolVector3Array( 1000, 0, -500, 500, 0, -500, 1000, 0, -1000, 1000, 0, -1000, 500, 0, -500, 500, 0, -1000, 0, 0, -500, -500, 0, -500, 0, 0, -1000, 0, 0, -1000, -500, 0, -500, -500, 0, -1000, 0, 0, 500, -500, 0, 500, 0, 0, 250, 0, 0, 250, -500, 0, 500, 0, 0, 125, 0, 0, 125, -500, 0, 500, 0, 0, 62.5, 0, 0, 62.5, -500, 0, 500, 0, 0, 31.25, 0, 0, 31.25, -500, 0, 500, 0, 0, 15.625, 0, 0, 15.625, -500, 0, 500, 0, 0, 0, 0, 0, 0, -500, 0, 500, -500, 0, 0, 1000, 0, 500, 500, 0, 500, 1000, 0, 0, 1000, 0, 0, 500, 0, 500, 500, 0, 0, 500, 0, 0, 500, 0, 500, 500, 0, 250, 500, 0, 250, 250, 0, 250, 500, 0, 0, 500, 0, 0, 250, 0, 250, 250, 0, 0, 250, 0, 0, 250, 0, 250, 250, 0, 125, 500, 0, 1000, 0, 0, 1000, 500, 0, 500, 500, 0, 500, 0, 0, 1000, 250, 0, 500, 250, 0, 500, 0, 0, 1000, 0, 0, 500, 1000, 0, 1000, 500, 0, 1000, 1000, 0, 500, 1000, 0, 500, 500, 0, 1000, 500, 0, 500, -500, 0, 500, -1000, 0, 500, -500, 0, 0, -500, 0, 0, -1000, 0, 500, -1000, 0, 0, -500, 0, 1000, -1000, 0, 1000, -500, 0, 500, -500, 0, 500, -1000, 0, 1000, -1000, 0, 500, 0, 0, 1000, -500, 0, 1000, 0, 0, 500, 0, 0, 500, -500, 0, 1000, -500, 0, 500, -500, 0, -500, -1000, 0, -500, -500, 0, -1000, -500, 0, -1000, -1000, 0, -500, -1000, 0, -1000, -500, 0, 0, -1000, 0, 0, -500, 0, -500, -500, 0, -500, -1000, 0, 0, -1000, 0, -500, 0, 0, 0, -500, 0, 0, 0, 0, -500, 0, 0, -500, -500, 0, 0, -500, 0, -500, 500, 0, -500, 0, 0, -500, 500, 0, -1000, 500, 0, -1000, 0, 0, -500, 0, 0, -1000, 15.625, 0, 0, 0, 0, 0, 31.25, 0, 0, 31.25, 0, 0, 0, 0, 0, 62.5, 0, 0, 62.5, 0, 0, 0, 0, 0, 125, 0, 0, 125, 0, 0, 0, 0, 0, 250, 0, 0, 250, 0, 0, 0, 0, 0, 500, 0, 0, 500, 0, 0, 0, 0, 0, 500, 0, -500, 500, 0, -500, 0, 0, 0, 0, 0, -500, 1000, 0, 0, 500, 0, 0, 1000, 0, -500, 1000, 0, -500, 500, 0, 0, 500, 0, -500, 250, 0, 125, 125, 0, 125, 250, 0, 0, 250, 0, 0, 125, 0, 125, 125, 0, 0, 125, 0, 0, 125, 0, 125, 125, 0, 62.5, 250, 0, 500, 0, 0, 500, 250, 0, 250, 250, 0, 250, 0, 0, 500, 125, 0, 250, 125, 0, 250, 0, 0, 500, 0, 0, 250, 500, 0, 500, 250, 0, 500, 500, 0, 250, 500, 0, 250, 250, 0, 500, 250, 0, 250, 125, 0, 62.5, 62.5, 0, 62.5, 125, 0, 0, 125, 0, 0, 62.5, 0, 62.5, 62.5, 0, 0, 62.5, 0, 0, 62.5, 0, 62.5, 62.5, 0, 31.25, 125, 0, 250, 0, 0, 250, 125, 0, 125, 125, 0, 125, 0, 0, 250, 62.5, 0, 125, 62.5, 0, 125, 0, 0, 250, 0, 0, 125, 250, 0, 250, 125, 0, 250, 250, 0, 125, 250, 0, 125, 125, 0, 250, 125, 0, 125, 62.5, 0, 31.25, 31.25, 0, 31.25, 62.5, 0, 0, 62.5, 0, 0, 31.25, 0, 31.25, 31.25, 0, 0, 31.25, 0, 0, 31.25, 0, 31.25, 31.25, 0, 15.625, 62.5, 0, 125, 0, 0, 125, 62.5, 0, 62.5, 62.5, 0, 62.5, 0, 0, 125, 31.25, 0, 62.5, 31.25, 0, 62.5, 0, 0, 125, 0, 0, 62.5, 125, 0, 125, 62.5, 0, 125, 125, 0, 62.5, 125, 0, 62.5, 62.5, 0, 125, 62.5, 0, 62.5, 31.25, 0, 15.625, 15.625, 0, 15.625, 31.25, 0, 0, 31.25, 0, 0, 15.625, 0, 15.625, 15.625, 0, 0, 31.25, 0, 62.5, 0, 0, 62.5, 31.25, 0, 31.25, 31.25, 0, 31.25, 0, 0, 62.5, 15.625, 0, 31.25, 15.625, 0, 31.25, 0, 0, 62.5, 0, 0, 31.25, 62.5, 0, 62.5, 31.25, 0, 62.5, 62.5, 0, 31.25, 62.5, 0, 31.25, 31.25, 0, 62.5, 31.25, 0, 31.25, 15.625, 0, 15.625, 0, 0, 15.625, 15.625, -1.4198, 15.625, 15.625, -1.4198, 15.625, 0, 0, 15.625, 0, -1.4198, 15.625, 15.625, 0, 31.25, 0, 0, 31.25, 15.625, 0, 15.625, 15.625, 0, 15.625, 0, 0, 31.25, 0, 0, 15.625, 31.25, 0, 31.25, 15.625, 0, 31.25, 31.25, 0, 15.625, 31.25, 0, 15.625, 15.625, 0, 31.25, 15.625, 0, 15.625, 15.625, -1.4198, 15.625, 0, -1.4198, 15.625, 15.625, -1.4198, 0, 15.625, -1.4198, 0, 0, -1.4198, 15.625, 0, -1.4198, 0, 15.625, 0, 0, 15.625, 0, 15.625, 15.625, -1.4198, 0, 15.625, -1.4198, 0, 15.625, 0, 15.625, 15.625, -1.4198, 15.625, 0, 0, 0, 15.625, 0, 0, 0, -1.4198, 0, 0, -1.4198, 0, 15.625, 0, 0, 15.625, -1.4198, 0, 0, 0, 15.625, 0, 0, 0, 0, -1.4198, 15.625, 0, -1.4198, 15.625, 0, 0, 0, 0, -1.4198, 0 )

[sub_resource type="PlaneMesh" id=13]
size = Vector2( 18, 18 )
subdivide_width = 5
subdivide_depth = 5

[sub_resource type="Shader" id=18]
code = "shader_type 	spatial;
render_mode 	cull_back,diffuse_burley,specular_schlick_ggx, blend_mix;


// Wave settings:
uniform float wave_speed = 0.5; // Speed scale for the waves
uniform vec4 wave_a = vec4(1.0, 1.0, 0.35, 3.0); 	// xy = Direction, z = Steepness, w = Length
uniform	vec4 wave_b = vec4(1.0, 0.6, 0.30, 1.55);	// xy = Direction, z = Steepness, w = Length
uniform	vec4 wave_c = vec4(1.0, 1.3, 0.25, 0.9); 	// xy = Direction, z = Steepness, w = Length

// Surface settings:
uniform vec2 sampler_scale = vec2(0.25, 0.25); 			// Scale for the sampler
uniform vec2 sampler_direction= vec2(0.05, 0.04); 		// Direction and speed for the sampler offset

uniform sampler2D uv_sampler : hint_aniso; 			// UV motion sampler for shifting the normalmap
uniform vec2 uv_sampler_scale = vec2(0.25, 0.25); 	// UV sampler scale
uniform float uv_sampler_strength = 0.04; 			// UV shifting strength

uniform sampler2D normalmap_a_sampler : hint_normal;	// Normalmap sampler A
uniform sampler2D normalmap_b_sampler : hint_normal;	// Normalmap sampler B

uniform sampler2D foam_sampler : hint_black;	// Foam sampler
uniform float foam_level = 0.5;					// Foam level -> distance from the object (0.0 - 0.5)

// Volume settings:
uniform float refraction 		 = 0.075;		// Refraction of the water

uniform vec4 color_deep : hint_color;		// Color for deep places in the water, medium to dark blue
uniform vec4 color_shallow : hint_color;		// Color for lower places in the water, bright blue - green
uniform float beers_law = 2.0;			// Beers law value, regulates the blending size to the deep water level
uniform float depth_offset = -0.75;		// Offset for the blending

// Projector for the water caustics:
uniform mat4 projector;									// Projector matrix, mostly the matric of the sun / directlight
uniform sampler2DArray caustic_sampler : hint_black;	// Caustic sampler, (Texture array with 16 Textures for the animation)

// Vertex -> Fragment:
varying float vertex_height;	// Height of the water surface
varying vec3 vertex_normal;		// Vertex normal -> Needed for refraction calculation
varying vec3 vertex_binormal;	// Vertex binormal -> Needed for refraction calculation
varying vec3 vertex_tangent;	// Vertex tangent -> Needed for refraction calculation

varying mat4 inv_mvp; 		// Inverse ModelViewProjection matrix -> Needed for caustic projection

// Wave function:
vec4 wave(vec4 parameter, vec2 position, float time, inout vec3 tangent, inout vec3 binormal)
{
	float wave_steepness	 = parameter.z;
	float wave_length		 = parameter.w;

	float k = 2.0 * 3.14159265359 / wave_length;
	float c = sqrt(9.8 / k);
	vec2 d = normalize(parameter.xy);
	float f = k * (dot(d, position) - c * time);
	float a = wave_steepness / k;
	
	tangent += normalize(vec3(1.0-d.x * d.x * (wave_steepness * sin(f)), d.x * (wave_steepness * cos(f)), -d.x * d.y * (wave_steepness * sin(f))));
	binormal += normalize(vec3(-d.x * d.y * (wave_steepness * sin(f)), d.y * (wave_steepness * cos(f)), 1.0-d.y * d.y * (wave_steepness * sin(f))));

	return vec4(d.x * (a * cos(f)), a * sin(f) * 0.25, d.y * (a * cos(f)), 0.0);
}


// Vertex shader:
void vertex()
{
	float	time			 = TIME * wave_speed;
	
	vec4	vertex			 = vec4(VERTEX, 1.0);
	vec3	vertex_position  = (WORLD_MATRIX * vertex).xyz;
	
	vec3 tang = vec3(0.0, 0.0, 0.0);
	vec3 bin = vec3(0.0, 0.0, 0.0);
	
	vertex 			+= wave(wave_a, vertex_position.xz, time, tang, bin);
	vertex 			+= wave(wave_b, vertex_position.xz, time, tang, bin);
	vertex 			+= wave(wave_c, vertex_position.xz, time, tang, bin);

	vertex_tangent 	 = tang;
	vertex_binormal  = bin;

	vertex_position  = vertex.xyz;

	vertex_height	 = (PROJECTION_MATRIX * MODELVIEW_MATRIX * vertex).z;

	TANGENT			 = vertex_tangent;
	BINORMAL		 = vertex_binormal;
	vertex_normal	 = normalize(cross(vertex_binormal, vertex_tangent));
	NORMAL			 = vertex_normal;

	UV				 = vertex.xz * sampler_scale;

	VERTEX			 = vertex.xyz;
	
	inv_mvp = inverse(PROJECTION_MATRIX * MODELVIEW_MATRIX);
}


// Fragment shader:
void fragment()
{
	// Calculation of the UV with the UV motion sampler
	vec2	uv_offset 					 = sampler_direction * TIME;
	vec2 	uv_sampler_uv 				 = UV * uv_sampler_scale + uv_offset;
	vec2	uv_sampler_uv_offset 		 = uv_sampler_strength * texture(uv_sampler, uv_sampler_uv).rg * 2.0 - 1.0;
	vec2 	uv 							 = UV + uv_sampler_uv_offset;
	
	// Normalmap:
	vec3 	normalmap					 = texture(normalmap_a_sampler, uv - uv_offset*2.0).rgb * 0.75;		// 75 % sampler A
			normalmap 					+= texture(normalmap_b_sampler, uv + uv_offset).rgb * 0.25;			// 25 % sampler B
	
	// Refraction UV:
	vec3	ref_normalmap				 = normalmap * 2.0 - 1.0;
			ref_normalmap				 = normalize(vertex_tangent*ref_normalmap.x + vertex_binormal*ref_normalmap.y + vertex_normal*ref_normalmap.z);
	vec2 	ref_uv						 = SCREEN_UV + (ref_normalmap.xy * refraction) / vertex_height;
	
	// Ground depth:
	float 	depth_raw					 = texture(DEPTH_TEXTURE, ref_uv).r * 2.0 - 1.0;
	float	depth						 = PROJECTION_MATRIX[3][2] / (depth_raw + PROJECTION_MATRIX[2][2]);
			
	float 	depth_blend 				 = exp((depth+VERTEX.z + depth_offset) * -beers_law);
			depth_blend 				 = clamp(1.0-depth_blend, 0.0, 1.0);	
	float	depth_blend_pow				 = clamp(pow(depth_blend, 2.5), 0.0, 1.0);

	// Ground color:
	vec3 	screen_color 				 = textureLod(SCREEN_TEXTURE, ref_uv, depth_blend_pow * 2.5).rgb;
	
	vec3 	dye_color 					 = mix(color_shallow.rgb, color_deep.rgb, depth_blend_pow);
	vec3	color 						 = mix(screen_color*dye_color, dye_color*0.25, depth_blend_pow*0.5);
	
	// Caustic screen projection
	vec4 	caustic_screenPos 			 = vec4(ref_uv*2.0-1.0, depth_raw, 1.0);
	vec4 	caustic_localPos 			 = inv_mvp * caustic_screenPos;
			caustic_localPos			 = vec4(caustic_localPos.xyz/caustic_localPos.w, caustic_localPos.w);
	
	vec2 	caustic_Uv 					 = caustic_localPos.xz / vec2(1024.0) + 0.5;
	vec4	caustic_color				 = texture(caustic_sampler, vec3(caustic_Uv*300.0, mod(TIME*14.0, 16.0)));

	color *= 1.0 + pow(caustic_color.r, 1.50) * (1.0-depth_blend) * 6.0;

	// Foam:
	if(depth + VERTEX.z < vertex_height-0.1){
		float foam_noise = clamp(pow(texture(foam_sampler, (uv*4.0) - uv_offset).r, 10.0)*40.0, 0.0, 0.2);
		float foam_mix = clamp(pow((1.0-(depth + VERTEX.z) + foam_noise), 8.0) * foam_noise * 0.4, 0.0, 1.0);
		color = mix(color, vec3(1.0), foam_mix);
	}
	
	// Set all values:
	ALBEDO = color;
	METALLIC = 0.1;
	ROUGHNESS = 0.2;
	SPECULAR = 0.2 + depth_blend_pow * 0.4;
	NORMALMAP = normalmap;
	NORMALMAP_DEPTH = 1.25;
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/wave_speed = 0.009
shader_param/wave_a = Plane( 1, 1, 0, 1 )
shader_param/wave_b = Plane( 1, 1, 0, 1 )
shader_param/wave_c = Plane( 1, 1, 0, 1 )
shader_param/sampler_scale = Vector2( 0.25, 0.25 )
shader_param/sampler_direction = Vector2( 0.05, 0.04 )
shader_param/uv_sampler_scale = Vector2( 0.25, 0.25 )
shader_param/uv_sampler_strength = 0.04
shader_param/foam_level = 0.5
shader_param/refraction = 0.075
shader_param/color_deep = Color( 0.780392, 0.905882, 0.972549, 0.705882 )
shader_param/color_shallow = Color( 0.607843, 0.729412, 0.756863, 0.529412 )
shader_param/beers_law = 2.0
shader_param/depth_offset = -0.75
shader_param/projector = null
shader_param/uv_sampler = ExtResource( 6 )
shader_param/normalmap_a_sampler = ExtResource( 10 )
shader_param/normalmap_b_sampler = ExtResource( 9 )
shader_param/foam_sampler = ExtResource( 7 )
shader_param/caustic_sampler = ExtResource( 8 )

[node name="Main" type="Spatial"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 5 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.805422, -0.435929, 0.401574, 0, 0.677531, 0.735494, -0.592702, -0.592383, 0.545698, 3.82278, 5.77905, 7.33065 )
shadow_enabled = true
shadow_color = Color( 0.0470588, 0.0196078, 0.219608, 1 )
shadow_bias = 0.135
shadow_contact = 0.658
__meta__ = {
"_edit_lock_": true
}

[node name="Player" parent="." instance=ExtResource( 1 )]
transform = Transform( -0.321456, 0, 0.946925, 0, 1, 0, -0.946925, 0, -0.321456, 22.5041, 8.01255, -5.37714 )

[node name="Arbre" parent="." instance=ExtResource( 3 )]
transform = Transform( -0.127342, 0, -0.991858, 0, 1, 0, 0.991858, 0, -0.127342, -19.1591, 0.018321, 2.85962 )

[node name="PetitCube" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0249632, -0.0389081, 15.9984 )
mesh = SubResource( 7 )
material/0 = null
__meta__ = {
"_edit_group_": true
}

[node name="StaticBody" type="StaticBody" parent="PetitCube"]

[node name="CollisionShape" type="CollisionShape" parent="PetitCube/StaticBody"]
shape = SubResource( 8 )

[node name="PetitCube4" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.931856, 0.362828, 0, -0.362828, 0.931856, 7.91888, -2.5814, 14.4458 )
mesh = SubResource( 7 )
material/0 = null
__meta__ = {
"_edit_group_": true
}

[node name="StaticBody" type="StaticBody" parent="PetitCube4"]

[node name="CollisionShape" type="CollisionShape" parent="PetitCube4/StaticBody"]
shape = SubResource( 8 )

[node name="PetitCube2" type="MeshInstance" parent="."]
transform = Transform( 0.987312, 0, 0.193184, 0, 1.00603, 0, -0.193184, 0, 0.987312, -12.4601, 1.9859, -9.31748 )
mesh = SubResource( 7 )
material/0 = null
__meta__ = {
"_edit_group_": true
}

[node name="StaticBody" type="StaticBody" parent="PetitCube2"]

[node name="CollisionShape" type="CollisionShape" parent="PetitCube2/StaticBody"]
shape = SubResource( 8 )

[node name="PetitCube3" type="MeshInstance" parent="."]
transform = Transform( 5.76109, 0, 3.40751, 0, 6.69338, 0, -3.40751, 0, 5.76109, -52.5662, 35.8164, -33.4462 )
mesh = SubResource( 11 )
material/0 = null
script = ExtResource( 4 )
__meta__ = {
"_edit_group_": true
}

[node name="StaticBody" type="StaticBody" parent="PetitCube3"]

[node name="CollisionShape" type="CollisionShape" parent="PetitCube3/StaticBody"]
shape = SubResource( 8 )

[node name="PlanPiscine" type="MeshInstance" parent="."]
material_override = SubResource( 12 )
mesh = ExtResource( 5 )
skeleton = NodePath("")
material/0 = null
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="StaticBody" type="StaticBody" parent="PlanPiscine"]

[node name="CollisionShape" type="CollisionShape" parent="PlanPiscine/StaticBody"]
shape = SubResource( 17 )

[node name="Water" type="MeshInstance" parent="PlanPiscine"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8.0077, -0.914562, 6.69625 )
mesh = SubResource( 13 )
skeleton = NodePath("../..")
material/0 = SubResource( 19 )
